part of bindings;
// ignore_for_file: non_constant_identifier_names, camel_case_types, unnecessary_brace_in_string_interps, unused_element

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

class Serial {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  Serial(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int cfgetospeed(
    ffi.Pointer<termios> __termios_p,
  ) {
    _cfgetospeed ??=
        _dylib.lookupFunction<_c_cfgetospeed, _dart_cfgetospeed>('cfgetospeed');
    return _cfgetospeed(
      __termios_p,
    );
  }

  _dart_cfgetospeed _cfgetospeed;

  int cfgetispeed(
    ffi.Pointer<termios> __termios_p,
  ) {
    _cfgetispeed ??=
        _dylib.lookupFunction<_c_cfgetispeed, _dart_cfgetispeed>('cfgetispeed');
    return _cfgetispeed(
      __termios_p,
    );
  }

  _dart_cfgetispeed _cfgetispeed;

  int cfsetospeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    _cfsetospeed ??=
        _dylib.lookupFunction<_c_cfsetospeed, _dart_cfsetospeed>('cfsetospeed');
    return _cfsetospeed(
      __termios_p,
      __speed,
    );
  }

  _dart_cfsetospeed _cfsetospeed;

  int cfsetispeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    _cfsetispeed ??=
        _dylib.lookupFunction<_c_cfsetispeed, _dart_cfsetispeed>('cfsetispeed');
    return _cfsetispeed(
      __termios_p,
      __speed,
    );
  }

  _dart_cfsetispeed _cfsetispeed;

  int cfsetspeed(
    ffi.Pointer<termios> __termios_p,
    int __speed,
  ) {
    _cfsetspeed ??=
        _dylib.lookupFunction<_c_cfsetspeed, _dart_cfsetspeed>('cfsetspeed');
    return _cfsetspeed(
      __termios_p,
      __speed,
    );
  }

  _dart_cfsetspeed _cfsetspeed;

  int tcgetattr(
    int __fd,
    ffi.Pointer<termios> __termios_p,
  ) {
    _tcgetattr ??=
        _dylib.lookupFunction<_c_tcgetattr, _dart_tcgetattr>('tcgetattr');
    return _tcgetattr(
      __fd,
      __termios_p,
    );
  }

  _dart_tcgetattr _tcgetattr;

  int tcsetattr(
    int __fd,
    int __optional_actions,
    ffi.Pointer<termios> __termios_p,
  ) {
    _tcsetattr ??=
        _dylib.lookupFunction<_c_tcsetattr, _dart_tcsetattr>('tcsetattr');
    return _tcsetattr(
      __fd,
      __optional_actions,
      __termios_p,
    );
  }

  _dart_tcsetattr _tcsetattr;

  void cfmakeraw(
    ffi.Pointer<termios> __termios_p,
  ) {
    _cfmakeraw ??=
        _dylib.lookupFunction<_c_cfmakeraw, _dart_cfmakeraw>('cfmakeraw');
    return _cfmakeraw(
      __termios_p,
    );
  }

  _dart_cfmakeraw _cfmakeraw;

  int tcsendbreak(
    int __fd,
    int __duration,
  ) {
    _tcsendbreak ??=
        _dylib.lookupFunction<_c_tcsendbreak, _dart_tcsendbreak>('tcsendbreak');
    return _tcsendbreak(
      __fd,
      __duration,
    );
  }

  _dart_tcsendbreak _tcsendbreak;

  int tcdrain(
    int __fd,
  ) {
    _tcdrain ??= _dylib.lookupFunction<_c_tcdrain, _dart_tcdrain>('tcdrain');
    return _tcdrain(
      __fd,
    );
  }

  _dart_tcdrain _tcdrain;

  int tcflush(
    int __fd,
    int __queue_selector,
  ) {
    _tcflush ??= _dylib.lookupFunction<_c_tcflush, _dart_tcflush>('tcflush');
    return _tcflush(
      __fd,
      __queue_selector,
    );
  }

  _dart_tcflush _tcflush;

  int tcflow(
    int __fd,
    int __action,
  ) {
    _tcflow ??= _dylib.lookupFunction<_c_tcflow, _dart_tcflow>('tcflow');
    return _tcflow(
      __fd,
      __action,
    );
  }

  _dart_tcflow _tcflow;

  int tcgetsid(
    int __fd,
  ) {
    _tcgetsid ??=
        _dylib.lookupFunction<_c_tcgetsid, _dart_tcgetsid>('tcgetsid');
    return _tcgetsid(
      __fd,
    );
  }

  _dart_tcgetsid _tcgetsid;

  int tcgetpgrp(
    int __fd,
  ) {
    _tcgetpgrp ??=
        _dylib.lookupFunction<_c_tcgetpgrp, _dart_tcgetpgrp>('tcgetpgrp');
    return _tcgetpgrp(
      __fd,
    );
  }

  _dart_tcgetpgrp _tcgetpgrp;

  int tcsetpgrp(
    int __fd,
    int __pgrp_id,
  ) {
    _tcsetpgrp ??=
        _dylib.lookupFunction<_c_tcsetpgrp, _dart_tcsetpgrp>('tcsetpgrp');
    return _tcsetpgrp(
      __fd,
      __pgrp_id,
    );
  }

  _dart_tcsetpgrp _tcsetpgrp;
}

class termios extends ffi.Struct {
  @ffi.Uint32()
  int c_iflag;

  @ffi.Uint32()
  int c_oflag;

  @ffi.Uint32()
  int c_cflag;

  @ffi.Uint32()
  int c_lflag;

  @ffi.Uint8()
  int c_line;

  @ffi.Uint8()
  int _unique_c_cc_item_0;
  @ffi.Uint8()
  int _unique_c_cc_item_1;
  @ffi.Uint8()
  int _unique_c_cc_item_2;
  @ffi.Uint8()
  int _unique_c_cc_item_3;
  @ffi.Uint8()
  int _unique_c_cc_item_4;
  @ffi.Uint8()
  int _unique_c_cc_item_5;
  @ffi.Uint8()
  int _unique_c_cc_item_6;
  @ffi.Uint8()
  int _unique_c_cc_item_7;
  @ffi.Uint8()
  int _unique_c_cc_item_8;
  @ffi.Uint8()
  int _unique_c_cc_item_9;
  @ffi.Uint8()
  int _unique_c_cc_item_10;
  @ffi.Uint8()
  int _unique_c_cc_item_11;
  @ffi.Uint8()
  int _unique_c_cc_item_12;
  @ffi.Uint8()
  int _unique_c_cc_item_13;
  @ffi.Uint8()
  int _unique_c_cc_item_14;
  @ffi.Uint8()
  int _unique_c_cc_item_15;
  @ffi.Uint8()
  int _unique_c_cc_item_16;
  @ffi.Uint8()
  int _unique_c_cc_item_17;
  @ffi.Uint8()
  int _unique_c_cc_item_18;
  @ffi.Uint8()
  int _unique_c_cc_item_19;
  @ffi.Uint8()
  int _unique_c_cc_item_20;
  @ffi.Uint8()
  int _unique_c_cc_item_21;
  @ffi.Uint8()
  int _unique_c_cc_item_22;
  @ffi.Uint8()
  int _unique_c_cc_item_23;
  @ffi.Uint8()
  int _unique_c_cc_item_24;
  @ffi.Uint8()
  int _unique_c_cc_item_25;
  @ffi.Uint8()
  int _unique_c_cc_item_26;
  @ffi.Uint8()
  int _unique_c_cc_item_27;
  @ffi.Uint8()
  int _unique_c_cc_item_28;
  @ffi.Uint8()
  int _unique_c_cc_item_29;
  @ffi.Uint8()
  int _unique_c_cc_item_30;
  @ffi.Uint8()
  int _unique_c_cc_item_31;

  /// Helper for array `c_cc`.
  ArrayHelper_termios_c_cc_level0 get c_cc =>
      ArrayHelper_termios_c_cc_level0(this, [32], 0, 0);
  @ffi.Uint32()
  int c_ispeed;

  @ffi.Uint32()
  int c_ospeed;
}

/// Helper for array `c_cc` in struct `termios`.
class ArrayHelper_termios_c_cc_level0 {
  final termios _struct;
  final List<int> dimensions;
  final int level;
  final int _absoluteIndex;
  int get length => dimensions[level];
  ArrayHelper_termios_c_cc_level0(
      this._struct, this.dimensions, this.level, this._absoluteIndex);
  void _checkBounds(int index) {
    if (index >= length || index < 0) {
      throw RangeError(
          'Dimension $level: index not in range 0..${length} exclusive.');
    }
  }

  int operator [](int index) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        return _struct._unique_c_cc_item_0;
      case 1:
        return _struct._unique_c_cc_item_1;
      case 2:
        return _struct._unique_c_cc_item_2;
      case 3:
        return _struct._unique_c_cc_item_3;
      case 4:
        return _struct._unique_c_cc_item_4;
      case 5:
        return _struct._unique_c_cc_item_5;
      case 6:
        return _struct._unique_c_cc_item_6;
      case 7:
        return _struct._unique_c_cc_item_7;
      case 8:
        return _struct._unique_c_cc_item_8;
      case 9:
        return _struct._unique_c_cc_item_9;
      case 10:
        return _struct._unique_c_cc_item_10;
      case 11:
        return _struct._unique_c_cc_item_11;
      case 12:
        return _struct._unique_c_cc_item_12;
      case 13:
        return _struct._unique_c_cc_item_13;
      case 14:
        return _struct._unique_c_cc_item_14;
      case 15:
        return _struct._unique_c_cc_item_15;
      case 16:
        return _struct._unique_c_cc_item_16;
      case 17:
        return _struct._unique_c_cc_item_17;
      case 18:
        return _struct._unique_c_cc_item_18;
      case 19:
        return _struct._unique_c_cc_item_19;
      case 20:
        return _struct._unique_c_cc_item_20;
      case 21:
        return _struct._unique_c_cc_item_21;
      case 22:
        return _struct._unique_c_cc_item_22;
      case 23:
        return _struct._unique_c_cc_item_23;
      case 24:
        return _struct._unique_c_cc_item_24;
      case 25:
        return _struct._unique_c_cc_item_25;
      case 26:
        return _struct._unique_c_cc_item_26;
      case 27:
        return _struct._unique_c_cc_item_27;
      case 28:
        return _struct._unique_c_cc_item_28;
      case 29:
        return _struct._unique_c_cc_item_29;
      case 30:
        return _struct._unique_c_cc_item_30;
      case 31:
        return _struct._unique_c_cc_item_31;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }

  void operator []=(int index, int value) {
    _checkBounds(index);
    switch (_absoluteIndex + index) {
      case 0:
        _struct._unique_c_cc_item_0 = value;
        break;
      case 1:
        _struct._unique_c_cc_item_1 = value;
        break;
      case 2:
        _struct._unique_c_cc_item_2 = value;
        break;
      case 3:
        _struct._unique_c_cc_item_3 = value;
        break;
      case 4:
        _struct._unique_c_cc_item_4 = value;
        break;
      case 5:
        _struct._unique_c_cc_item_5 = value;
        break;
      case 6:
        _struct._unique_c_cc_item_6 = value;
        break;
      case 7:
        _struct._unique_c_cc_item_7 = value;
        break;
      case 8:
        _struct._unique_c_cc_item_8 = value;
        break;
      case 9:
        _struct._unique_c_cc_item_9 = value;
        break;
      case 10:
        _struct._unique_c_cc_item_10 = value;
        break;
      case 11:
        _struct._unique_c_cc_item_11 = value;
        break;
      case 12:
        _struct._unique_c_cc_item_12 = value;
        break;
      case 13:
        _struct._unique_c_cc_item_13 = value;
        break;
      case 14:
        _struct._unique_c_cc_item_14 = value;
        break;
      case 15:
        _struct._unique_c_cc_item_15 = value;
        break;
      case 16:
        _struct._unique_c_cc_item_16 = value;
        break;
      case 17:
        _struct._unique_c_cc_item_17 = value;
        break;
      case 18:
        _struct._unique_c_cc_item_18 = value;
        break;
      case 19:
        _struct._unique_c_cc_item_19 = value;
        break;
      case 20:
        _struct._unique_c_cc_item_20 = value;
        break;
      case 21:
        _struct._unique_c_cc_item_21 = value;
        break;
      case 22:
        _struct._unique_c_cc_item_22 = value;
        break;
      case 23:
        _struct._unique_c_cc_item_23 = value;
        break;
      case 24:
        _struct._unique_c_cc_item_24 = value;
        break;
      case 25:
        _struct._unique_c_cc_item_25 = value;
        break;
      case 26:
        _struct._unique_c_cc_item_26 = value;
        break;
      case 27:
        _struct._unique_c_cc_item_27 = value;
        break;
      case 28:
        _struct._unique_c_cc_item_28 = value;
        break;
      case 29:
        _struct._unique_c_cc_item_29 = value;
        break;
      case 30:
        _struct._unique_c_cc_item_30 = value;
        break;
      case 31:
        _struct._unique_c_cc_item_31 = value;
        break;
      default:
        throw Exception('Invalid Array Helper generated.');
    }
  }
}

const int VINTR = 0;

const int VQUIT = 1;

const int VERASE = 2;

const int VKILL = 3;

const int VEOF = 4;

const int VTIME = 5;

const int VMIN = 6;

const int VSWTC = 7;

const int VSTART = 8;

const int VSTOP = 9;

const int VSUSP = 10;

const int VEOL = 11;

const int VREPRINT = 12;

const int VDISCARD = 13;

const int VWERASE = 14;

const int VLNEXT = 15;

const int VEOL2 = 16;

const int IGNBRK = 1;

const int BRKINT = 2;

const int IGNPAR = 4;

const int PARMRK = 8;

const int INPCK = 16;

const int ISTRIP = 32;

const int INLCR = 64;

const int IGNCR = 128;

const int ICRNL = 256;

const int IUCLC = 512;

const int IXON = 1024;

const int IXANY = 2048;

const int IXOFF = 4096;

const int IMAXBEL = 8192;

const int OPOST = 1;

const int OLCUC = 2;

const int ONLCR = 4;

const int OCRNL = 8;

const int ONOCR = 16;

const int ONLRET = 32;

const int OFILL = 64;

const int OFDEL = 128;

const int NLDLY = 256;

const int CRDLY = 1536;

const int CR0 = 0;

const int CR1 = 512;

const int CR2 = 1024;

const int CR3 = 1536;

const int TABDLY = 6144;

const int BSDLY = 8192;

const int FFDLY = 32768;

const int VTDLY = 16384;

const int VT0 = 0;

const int VT1 = 16384;

const int CBAUD = 4111;

const int B0 = 0;

const int B50 = 1;

const int B75 = 2;

const int B110 = 3;

const int B134 = 4;

const int B150 = 5;

const int B200 = 6;

const int B300 = 7;

const int B600 = 8;

const int B1200 = 9;

const int B1800 = 10;

const int B2400 = 11;

const int B4800 = 12;

const int B9600 = 13;

const int B19200 = 14;

const int B38400 = 15;

const int CSIZE = 48;

const int CS5 = 0;

const int CS6 = 16;

const int CS7 = 32;

const int CS8 = 48;

const int CSTOPB = 64;

const int CREAD = 128;

const int PARENB = 256;

const int PARODD = 512;

const int HUPCL = 1024;

const int CLOCAL = 2048;

const int CBAUDEX = 4096;

const int B57600 = 4097;

const int B115200 = 4098;

const int B230400 = 4099;

const int B460800 = 4100;

const int B500000 = 4101;

const int B576000 = 4102;

const int B921600 = 4103;

const int B1000000 = 4104;

const int B1152000 = 4105;

const int B1500000 = 4106;

const int B2000000 = 4107;

const int B2500000 = 4108;

const int B3000000 = 4109;

const int B3500000 = 4110;

const int B4000000 = 4111;

const int CIBAUD = 269418496;

const int CMSPAR = 1073741824;

const int CRTSCTS = 2147483648;

const int ISIG = 1;

const int ICANON = 2;

const int XCASE = 4;

const int ECHO = 8;

const int ECHOE = 16;

const int ECHOK = 32;

const int ECHONL = 64;

const int NOFLSH = 128;

const int TOSTOP = 256;

const int ECHOCTL = 512;

const int ECHOPRT = 1024;

const int ECHOKE = 2048;

const int FLUSHO = 4096;

const int PENDIN = 16384;

const int IEXTEN = 32768;

const int TCOOFF = 0;

const int TCOON = 1;

const int TCIOFF = 2;

const int TCION = 3;

const int TCIFLUSH = 0;

const int TCOFLUSH = 1;

const int TCIOFLUSH = 2;

const int TCSANOW = 0;

const int TCSADRAIN = 1;

const int TCSAFLUSH = 2;

typedef _c_cfgetospeed = ffi.Uint32 Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfgetospeed = int Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _c_cfgetispeed = ffi.Uint32 Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfgetispeed = int Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _c_cfsetospeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetospeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef _c_cfsetispeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetispeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef _c_cfsetspeed = ffi.Int32 Function(
  ffi.Pointer<termios> __termios_p,
  ffi.Uint32 __speed,
);

typedef _dart_cfsetspeed = int Function(
  ffi.Pointer<termios> __termios_p,
  int __speed,
);

typedef _c_tcgetattr = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_tcgetattr = int Function(
  int __fd,
  ffi.Pointer<termios> __termios_p,
);

typedef _c_tcsetattr = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __optional_actions,
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_tcsetattr = int Function(
  int __fd,
  int __optional_actions,
  ffi.Pointer<termios> __termios_p,
);

typedef _c_cfmakeraw = ffi.Void Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _dart_cfmakeraw = void Function(
  ffi.Pointer<termios> __termios_p,
);

typedef _c_tcsendbreak = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __duration,
);

typedef _dart_tcsendbreak = int Function(
  int __fd,
  int __duration,
);

typedef _c_tcdrain = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcdrain = int Function(
  int __fd,
);

typedef _c_tcflush = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __queue_selector,
);

typedef _dart_tcflush = int Function(
  int __fd,
  int __queue_selector,
);

typedef _c_tcflow = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __action,
);

typedef _dart_tcflow = int Function(
  int __fd,
  int __action,
);

typedef _c_tcgetsid = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetsid = int Function(
  int __fd,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
);

typedef _dart_tcgetpgrp = int Function(
  int __fd,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 __fd,
  ffi.Int32 __pgrp_id,
);

typedef _dart_tcsetpgrp = int Function(
  int __fd,
  int __pgrp_id,
);
